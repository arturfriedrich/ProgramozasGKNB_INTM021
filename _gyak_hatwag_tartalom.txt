Tartalom:
1. h√©t
    - v√°ltoz√≥k, liter√°lok
    - magas szint≈± ki √©s bemenetek
    - egyszer≈± vez√©rl√©si szerkezetek
2. h√©t
    - h√°tultesztel≈ë ciklusok
    - √∂sszetettebb alkalmaz√°si mint√°k
    - karakterl√°ncok
3. h√©t
    - egydimenzi√≥s t√∂mb√∂k
    - szimbolikus √°lland√≥k
4. h√©t
    - ciklusszervez√©si megold√°sok
    - t√∂bbir√°ny√∫ szelekci√≥
    - lebeg≈ëpontos adatok haszn√°lata
    - explicit √©s implicit t√≠puskonverzi√≥
    - matematikai f√ºggv√©nyk√∂nyvt√°r fontosabb elemei
5. h√©t
    - egyszer≈± f√ºggv√©nyek defini√°l√°sa
6. h√©t
    - strukt√∫r√°k, strukt√∫rat√∂mb√∂k
    - t√∂bb √©rt√©k visszaad√°sa f√ºggv√©nyekb≈ël
7. h√©t
    - k√©tdimenzi√≥s t√∂mb√∂k
    - √©rt√©k szerinti √°tad√°s
    - t√∂mb√∂k param√©terk√©nti √°tad√°sa f√ºggv√©nyeknek
    - mutat√≥k, c√≠m szerinti param√©ter-√°tad√°s
    - mutat√≥ oper√°torok
8. h√©t
    - dinamikus mem√≥riafoglal√°s
    - dinamikus vektorok
    - ny√≠l oper√°tor
9. h√©t
    - k√©tdimenzi√≥s dinamikus t√∂mb√∂k
10. h√©t
    - t√∂bb forr√°sf√°jlb√≥l √°ll√≥ projektek
    - f√ºggv√©nyek deklar√°ci√≥ja √©s defin√≠ci√≥ja
    - header guard
    - #include direkt√≠va
    - kapcsol√≥d√≥-szerkeszt√©s menete
11. h√©t
    - l√°ncolt list√°k
12. h√©t
    - fastrukt√∫ra
    - rekurzi√≥
13. h√©t
    - magas szint≈± I/O
    - parancssori argumentumok



1. h√©t
- Projekt l√©trehoz√°sa
- Melyik panelen mi van, mit csin√°l? Elrendez√©s testreszab√°sa (CodeBlocks Perspectives)
- Ford√≠t√°s, futtat√°s, debug m√≥d
- Hello world! (cout, string liter√°l ki√≠rat√°sa)

K√∂z√∂s feladat
- K√©rj√ºnk be egy sz√°mot (int) √©s √≠rjuk ki a k√©tszeres√©t

√ñn√°ll√≥ feladat
- K√©rj√ºnk be k√©t sz√°mot (int) √©s √≠rjuk ki az √∂sszeg√ºket
- √çrjuk ki a szorzatukat is
- √çrjuk ki a szorzat √©s az √∂sszeg k√ºl√∂nbs√©g√©t

K√∂z√∂s feladat
- K√©rj√ºnk be egy sz√°mot √©s √≠rjuk ki az abszol√∫t √©rt√©k√©t (T√∂bbf√©le ki√≠rat√°s megmutat√°sa, pl. √©rt√©kad√°ssal, an√©lk√ºl, -x, -1*x)
- Ha a sz√°m p√°ros, √≠rjuk ki a fel√©t
- N√©zz√ºk meg, p√°ratlan sz√°m eset√©n mi lesz a 2-vel val√≥ oszt√°s eredm√©nye

√ñn√°ll√≥ feladat
- K√©rj√ºnk be k√©t sz√°mot, ha az els≈ë nagyobb, √≠rjuk ki a k√ºl√∂nbs√©g√ºket
- Ha mindk√©t sz√°m kisebb, mint 10, akkor √≠rjuk ki a szorzatukat is

K√∂z√∂s feladat
- √çrjuk ki a sz√°mokat 1-t≈ël 100-ig
- K√©rj√ºk be N √©rt√©k√©t, majd √≠rjuk ki a sz√°mokat 1-t≈ël N-ig
- Ellen≈ërizz√ºk, hogy N>1
- A v√©g√©n √≠rjuk ki a sz√°mok √∂sszeg√©t
- Csak a p√°ros sz√°mokat √≠rjuk ki
- Opcion√°lis feladat: k√©rj√ºnk be k√©t sz√°mot, majd soroljuk fel a k√∂zt√ºk l√©v≈ë sz√°mokat, ha az els≈ë sz√°m nagyobb, akkor cs√∂kken≈ë sorrendben

√ñn√°ll√≥ feladat
- K√©rj√ºk be N √©rt√©k√©t, majd √≠rjuk ki a faktori√°lis√°t
- Fizzbuzz: Koncentr√°ci√≥s j√°t√©k, ahol 1-t≈ël kezdve soroljuk a sz√°mokat, √©s minden 3-mal oszthat√≥ sz√°m helyett azt kell mondani, hogy Fizz, az 5-tel oszthat√≥k helyett, hogy Buzz. Ha 3-mal √©s 5-tel is oszthat√≥ a sz√°m, akkor azt kell mondani, hogy FizzBuzz. √çrjunk programot, ami ilyen m√≥don sz√°mol 1-t≈ël 100-ig!
- Opcion√°lis feladat: K√©rj√ºnk be egy sz√°mot, √©s mondjuk meg r√≥la, hogy pr√≠msz√°m-e
---------------------------------------------------------------------------------------------------


2. h√©t
√ñn√°ll√≥ feladat
- K√©rj√ºnk be k√©t sz√°mot, majd mondjuk meg, hogy az els≈ë a nagyobb, a m√°sodik, vagy egyenl≈ëk!

K√∂z√∂s feladat
- A fenti feladatot oldjuk meg k√∂z√∂sen else, else if haszn√°lat√°val, k√ºl√∂nb√∂z≈ë m√≥dokon
- K√©rj√ºnk be sz√°mokat, am√≠g p√°ratlan sz√°mot nem kapunk, √©s a p√°rosoknak mindig √≠rjuk ki a fel√©t

√ñn√°ll√≥ feladat
K√©rj√ºnk be sz√°mokat, m√≠g egym√°s ut√°n k√©tszer ugyanazt a sz√°mot nem kapjuk
- A v√©g√©n √≠rjuk ki, hogy h√°ny sz√°mot olvastunk be
- √âs h√°ny p√°ros sz√°mot olvastunk be?

K√∂z√∂s feladat
- K√©rj√ºnk egy sz√°mot, rajzoljunk ennyi karakter sz√©les n√©gyzetet a k√©perny≈ëre
- Rajzoljuk be a k√©t √°tl√≥t is

√ñn√°ll√≥ feladat
- Magass√°g bek√©r√©se ut√°n l√©pcs≈ë kirajzol√°sa (i. sorban i db '*')
- L√©pcs≈ë f√ºgg≈ëlegesen t√ºkr√∂zve (jobbra igaz√≠tva a csillagokat)

K√∂z√∂s feladat
Men√º program, sz√°m megad√°s√°val adhat√≥ ki a parancs (√©rv√©nytelen sz√°mra kil√©p)
    1. √ñsszead√°s (bek√©r k√©t sz√°mot √©s ki√≠rja az √∂sszeget)
    2. Szorz√°s
    3. Hatv√°nyoz√°s
    4. Sz√°mtani sorozat a0 √©s d alapj√°n n elem (√∂n√°ll√≥ feladat, a h√°rom param√©tert be kell k√©rni)

Megjegyz√©s

Sz√°mtani sorozatoknak nevezz√ºk azokat a sorozatokat, amelyekben (a m√°sodikt√≥l kezdve) b√°rmelyik tag √©s az azt megel≈ëz≈ë tag k√ºl√∂nbs√©ge √°lland√≥.
Ezt az √°lland√≥ k√ºl√∂nbs√©get a sorozat differenci√°j√°nak nevezz√ºk, √©s √°ltal√°ban d-vel jel√∂lj√ºk.
Formul√°val: ùëé1;ùëéùëõ=ùëéùëõ‚àí1+ùëë, ahol n > 1.
---------------------------------------------------------------------------------------------------


3.h√©t
√ñn√°ll√≥ feladat
- Olvassunk be 10 sz√°mot, majd √≠rjuk ki az √°tlagukat (ehhez m√©g nem kell t√∂mb)

K√∂z√∂s feladat (el≈ëz≈ë folyt.)
- Olvassunk be 10 sz√°mot, majd √≠rjuk ki az √°tlagukat (ehhez m√©g nem kell t√∂mb)
- √çrjuk ki az √°tlag alatti √©rt√©keket (itt m√°r musz√°j t√∂mbbe elt√°rolni a sz√°mokat)

√ñn√°ll√≥ feladat
- Olvassuk be k√©t 3-dimenzi√≥s vektor koordin√°t√°it
- √çrjuk ki a vektorok √∂sszeg√©t, k√ºl√∂nbs√©g√©t
- A dimenzi√≥ legyen #define-nal megadva

K√∂z√∂s feladat
- Olvassunk be 10 sz√°mot egy t√∂mbbe
- K√©rj√ºnk be tov√°bbi sz√°mokat, √©s mondjuk meg, h√°nyszor szerepeltek a 10 elem≈± t√∂mbben
- Ha egyszer sem szerepelt, √°lljon le a program

√ñn√°ll√≥ feladat
- Olvassunk be 10 sz√°mot egy t√∂mbbe!
- K√©rj√ºnk be k√©t indexet, √©s cser√©lj√ºk fel a megfelel≈ë index≈± elemeket, majd √≠rjuk ki a t√∂mb√∂t!
- Fejlessz√ºk ezt tov√°bb √∫gy, hogy nem indexet, hanem sorsz√°mot k√©r√ºnk a felhaszn√°l√≥t√≥l! A sorsz√°m az [1, 10] z√°rt intervallumba essen, hogy k√©nyelmesebb legyen a program haszn√°lata a felhaszn√°l√≥nak!
- Ism√©t fejlessz√ºk tov√°bb a programot √∫gy, hogy addig ism√©telj√ºk a cser√©ket, am√≠g √©rv√©nytelen sorsz√°mot (<1 vagy >10) nem kapunk !

√ñn√°ll√≥ feladat
- Olvassunk be 5 sz√°mot egy t√∂mbbe
- K√©rj√ºnk be tov√°bbi sz√°mokat, √©s ennyivel shiftelj√ºk jobbra az elemeket, majd √≠rjuk ki a t√∂mb√∂t
- Negat√≠v sz√°m eset√©n balra shifteljen, √©s 5-n√©l nagyobbra is m≈±k√∂dj√∂n
- Addig ism√©telj√ºk, am√≠g nem 0-t kapunk
---------------------------------------------------------------------------------------------------


4. h√©t
Szinusz g√∂rbe ascii art st√≠lusban
- Vizualiz√°lja karakteres fel√ºleten a szinusz f√ºggv√©nyt! Ha √∫gy k√∂nnyebb, az x tengely √°llhat f√ºgg≈ëlegesen is, azaz 90 fokkal el lehet forgatni az √°br√°t.

M√°sodfok√∫ egyenlet
- Olvassunk be `a` `b` √©s `c` egy√ºtthat√≥kat szabv√°ny bemenetr≈ël
- Amennyiben az √©rt√©kek alapj√°n alkotott m√°sodfok√∫ egyenletnek (ùëéùë•2+ùëèùë•+ùëê=0) van val√≥s gy√∂ke √≠rja ki az eredm√©nyt, k√ºl√∂nben pedig `Az egyenletenek nincs valos gyoke` sz√∂veget.

Megjegyz√©s: Az egyenletnek akkor van val√≥s gy√∂ke, ha a n√©gyzetgy√∂kjel alatt √°ll√≥ diszkrimin√°ns nemnegat√≠v.

Jelezz√ºk ki a megold√°st
- Seg√≠ts√©g: a 4ùë•2+8ùë•‚àí5=0 egyenlet megold√°sai: ùë•1=0.5,ùë•2=‚àí2.5
- Plusz feladat: amennyiben a diszkrimin√°ns 0 √©s csak 1 megold√°s van, akkor ezt k√ºl√∂n jelezze!

Rendsz√°m ellen≈ërz≈ë
- √çrjon C++ programot, amely egy string valid√°ci√≥j√°t v√©gzi el. A form√°tum egyezzen meg a leggyakoribb magyar rendsz√°mt√°bla form√°tum√°val. Eszerint 7 karakter hossz√∫s√°g√∫ legyen, ennek elej√©n h√°rom (nagy vagy kis) bet≈± ut√°n egy k√∂t≈ëjel √©s v√©g√ºl h√°rom sz√°m k√∂vetkezzen!
- A program `k` bet≈±re l√©pjen ki!
- Plusz feladat: Fejlessze tov√°bb az el≈ëz≈ë feladatot, √∫gy, hogy a 3 bet≈±, k√∂t≈ëjel, 3 sz√°m mellett a 3 bet≈±, h√°rom sz√°m √©s a 3 bet≈±, space, 3 sz√°m form√°tumot is fogadja el. Pl. `SZE-001`, `SZE 001`, `SZE001`
---------------------------------------------------------------------------------------------------


5. h√©t
√ñsszead√°s f√ºggv√©nnyel
- √çrjon f√ºggv√©nyt, amely k√©t sz√°mot v√°r param√©ter√ºl √©s eredm√©ny√ºl visszaadja a k√©t sz√°m √∂sszeg√©t!
- √çrjon programot, amely k√©t sz√°mot olvas be mindaddig, m√≠g azok √∂sszege nem oszthat√≥ 7-tel! A feladat megold√°s√°hoz haszn√°lja fel az el≈ëz≈ëleg meg√≠rt f√ºggv√©ny!
(Felhaszn√°lt forr√°s: PE-MIK C Programoz√°s I feladatgy≈±jtem√©ny)
   
Nagyobb sz√°m f√ºggv√©nnyel
- √çrjon f√ºggv√©nyt, amely k√©t sz√°mot v√°r param√©ter√ºl √©s eredm√©ny√ºl `1`-et ad vissza, ha az els≈ë sz√°m nagyobb a m√°sodikn√°l, `-1`-et, ha a m√°sodik nagyobb az els≈ën√©l, `0`-√°t, ha egyenl≈ëk!
- Olvasson be egy h√©telem≈± t√∂mb√∂t!
- √çrassa ki a k√©perny≈ëre azon szomsz√©dos elemeket, amelyekre igaz, hogy az els≈ë nagyobb a m√°sodikn√°l!
(Felhaszn√°lt forr√°s: PE-MIK C Programoz√°s I feladatgy≈±jtem√©ny)

  
Legnagyobb sz√°m f√ºggv√©nnyel
- √çrjon f√ºggv√©nyt, amely k√©t sz√°mot v√°r param√©ter√ºl √©s eredm√©ny√ºl visszaadja a k√©t sz√°m maximum√°t!
- Olvasson be egy sz√°mot, amelyet elt√°rol jelenlegi maxim√°lis √©rt√©kk√©nt!
- Olvasson be sz√°mokat addig, m√≠g nem adunk meg h√°romszor is nagyobb sz√°mot az el≈ëz≈ëekn√©l! A nagyobb sz√°mot mindig t√°rolja el jelenlegi maximumk√©nt!
- A feladat megold√°s√°hoz haszn√°lja fel az el≈ëz≈ëleg meg√≠rt f√ºggv√©nyt!
(Felhaszn√°lt forr√°s: PE-MIK C Programoz√°s I feladatgy≈±jtem√©ny)
---------------------------------------------------------------------------------------------------


6. h√©t
Strukt√∫r√°k, strukt√∫rat√∂mb

- K√©sz√≠tsen programot, amely szem√©lyek sz√ºlet√©si √©v√©t, h√≥napj√°t, napj√°t k√©pes t√°rolni, valamint a szem√©ly lakhely√©nek f≈ëv√°rost√≥l val√≥ t√°vols√°g√°t km-ben (float)!
- Olvassa be 5 szem√©ly adatait a standard bemenetr≈ël!
- Rendezze a t√∂mb√∂t a f≈ëv√°rost√≥l val√≥ t√°vols√°gok szerinti cs√∂kken≈ë sorrendbe, majd jelen√≠tse meg az elemeit!
- Rendezze a t√∂mb√∂t a szem√©lyek kora szerinti n√∂vekv≈ë sorrendbe, majd jelen√≠tse meg az elemeit!
(Felhaszn√°lt forr√°s: PE-MIK C Programoz√°s I feladatgy≈±jtem√©ny)
 
 
T√∂bb √©rt√©k visszaad√°sa f√ºggv√©nyb≈ël:
- K√©sz√≠tsen programot, amely bek√©ri a standard bemenetr≈ël hallgat√≥k vezet√©knev√©t, keresztnev√©t, neptun k√≥dj√°t, egy tant√°rgy nev√©t √©s a t√°rgyb√≥l √≠rt 4 db ZH eredm√©nyeit!
- Az adatok bek√©r√©s√©t v√©gezze el egy erre a c√©lra tervezett f√ºggv√©ny, amely t√∂bb √©rt√©ket k√©pes vissza adni!
- Az √°tlag sz√°m√≠t√°s√°t szint√©n egy f√ºggv√©ny seg√≠ts√©g√©vel v√©gezze el, ahol param√©terk√©nt az el≈ëz≈ë pontban meghat√°rozott f√ºggv√©ny visszat√©r√©si √©rt√©kei szolg√°ljanak!
---------------------------------------------------------------------------------------------------


7. h√©t
Mutat√≥k, bevezet≈ë feladat
- Hozzon l√©tre egy eg√©sz sz√°mot t√°rol√≥ v√°ltoz√≥t √©s hozz√° egy mutat√≥t!
- Olvassa be a sz√°m √©rt√©k√©t a mutat√≥n kereszt√ºl!
- √çrassa ki a k√©perny≈ëre a sz√°m √©rt√©k√©t √©s mem√≥riac√≠m√©t az els≈ë v√°ltoz√≥ seg√≠ts√©g√©vel!
- √çrassa ki a k√©perny≈ëre a sz√°m √©rt√©k√©t √©s mem√≥riac√≠m√©t a mutat√≥ v√°ltoz√≥ seg√≠ts√©g√©vel!
- √çrassa ki a k√©perny≈ëre a mutat√≥ c√≠m√©t!
 
Mutat√≥k, t√∂mb√∂k
- Olvasson be egy hatelem≈± t√∂mb√∂t, amely eg√©sz sz√°mokat t√°rol √©s t√∂ltse fel √©rt√©kekkel!
- Hozzon l√©tre egy 10 elem≈± t√∂mb√∂t, amely mutat√≥kat t√°rol!
- Olvasson be t√≠z sz√°mot a k√©perny≈ër≈ël! Ha a sz√°m szerepel a hatelem≈± t√∂mbben, t√°rolja el annak a c√≠m√©t, ellenkez≈ë esetben t√°roljon el egy nulla√©rt√©k≈± c√≠met!
- Jelen√≠tse meg a 10 elem≈± t√∂mb √°ltal mutatott √©rt√©keket √©s hozz√°juk tartoz√≥ mem√≥riac√≠meket!
 
Mutat√≥k, strukt√∫r√°k
- K√©sz√≠tsen egy strukt√∫r√°t, amely koordin√°t√°kat t√°rol (x, y, z)!
- Hozzon l√©tre egy t√≠zelem≈± t√∂mb√∂t, amely koordin√°t√°kat t√°rol!
- Egy mutat√≥ seg√≠ts√©g√©vel t√∂ltse fel a t√∂mb√∂t √©rt√©kekkel!
- A mutat√≥n kereszt√ºl jelen√≠tse meg a t√∂mb elemeit!
 
Mutat√≥k, strukt√∫r√°k √©s f√ºggv√©nyek
- K√©sz√≠tsen egy koordin√°ta strukt√∫r√°t!
- K√©sz√≠tsen egy h√°romsz√∂g strukt√∫r√°t, amely h√°rom koordin√°t√°t t√°rol!
- √çrjon f√ºggv√©nyt, amely egy h√°romsz√∂g strukt√∫ra c√≠m√©t kapja meg √©s felt√∂lti azt billenty≈±zetr≈ël olvasott √©rt√©kekkel!
- √çrjon f√ºggv√©nyt, amely egy h√°romsz√∂g strukt√∫ra c√≠m√©t kapja √©s megjelen√≠ti azt a k√©perny≈ën!
- Olvasson be egy k√©t elem≈± t√∂mbbe h√°romsz√∂geket az el≈ëbb meg√≠rt f√ºggv√©ny seg√≠ts√©g√©vel!
- √çrassa ki a t√∂mb elemeit!
---------------------------------------------------------------------------------------------------


8. h√©t
Bevezet√©s: V√°ltoz√≥k dinamikus foglal√°sa

Hozzon l√©tre egy eg√©sz sz√°mot c√≠mz≈ë mutat√≥t!
Foglalja le az eg√©sz sz√°mnak sz√ºks√©ges helyet!
Olvasson be egy sz√°mot a mem√≥riater√ºletre!
√çrassa ki a k√©perny≈ëre a beolvasott sz√°mot!
Szabad√≠tsa fel a haszn√°lt mem√≥riater√ºletet!

T√∂mb√∂k dinamikus foglal√°sa

Olvasson be egy eg√©sz sz√°mot billenty≈±zetr≈ël!
Foglaljon helyet annyi eg√©sz sz√°mnak, amennyi az el≈ëz≈ëleg beolvasott sz√°m √©rt√©ke!
Olvasson be √©s t√°roljon el annyi eg√©sz sz√°mot, amennyi az el≈ëz≈ëleg beolvasott sz√°m √©rt√©ke!
√çrassa ki a beolvasott sz√°mokat!
Szabad√≠tsa fel a lefoglalt mem√≥riater√ºletet!

Dinamikus strukt√∫ra helyfoglal√°s
- K√©sz√≠tsen egy koordin√°t√°t t√°rol√≥ strukt√∫r√°t!
- √çrjon f√ºggv√©nyt, amely koordin√°t√°t olvas be billenty≈±zetr≈ël!
- Foglaljon dinamikus mem√≥ri√°t √©s jelen√≠tse meg a t√°rolt koordin√°t√°kat!
- Szabad√≠tsa fel a lefoglalt mem√≥riater√ºletet!

C t√≠pus√∫ karaktert√∂mb√∂k foglal√°sa:
- Olvasson be egy legfeljebb 100 karakter hossz√∫ sz√∂veget!
- Hozzon l√©tre egy a sz√∂veg hossz√°nak megfelel≈ë m√©ret≈± t√∂mb√∂t!
- M√°solja √°t a sz√∂veget a sz√°m√°ra l√©trehozott t√∂mbbe!
- √çrassa ki a sz√∂veget!
- Szabad√≠tsa fel a lefoglalt mem√≥riater√ºletet!

Ismeretlen sz√°m√∫ √©rt√©k el≈ëfordul√°s√°nak megsz√°ml√°l√°sa
- Olvasson be eg√©sz sz√°mokat, am√≠g 0-t nem kap, majd mondja meg, melyik √©rt√©k h√°nyszor szerepelt a bemeneten!
- Els≈ë szint: Az √©rt√©kek egy ismert, kis intervallumba eshetnek.
- M√°sodik szint: Nem ismert az √©rt√©kek intervalluma, de csak 100-f√©le √©rt√©k fordulhat el≈ë.
- Harmadik szint: Tetsz≈ëleges k√ºl√∂nb√∂z≈ë √©rt√©k el≈ëfordulhat.
- Negyedik szint: Az √©rt√©k-darabsz√°m p√°rokat rendezve t√°rolja, √©s bin√°ris keres√©ssel keresse meg az aktu√°lis elemet!
---------------------------------------------------------------------------------------------------


9.h√©t
Pascal-h√°romsz√∂g
- K√©rje be a sorok sz√°m√°t!
- Hozzon l√©tre dinamikusan egy h√°romsz√∂g-m√°trixot a t√°rol√°shoz (az els≈ë sor 1 hossz√∫, majd egyes√©vel n√∂vekszik)!
- Sz√°molja ki az egyes elemeket: minden sor sz√©lein 1, a k√∂ztes elemek a f√∂l√∂tte l√©v≈ë k√©t elem √∂sszegei!
- Jelen√≠tse meg a h√°romsz√∂g-m√°trixot (a sorokat nem kell k√∂z√©pre igaz√≠tani)!
- Szabad√≠tsa fel a haszn√°lt mem√≥riater√ºletet!

 
Vigen√©re-rejtjelez√©s
- A Vigen√©re-rejtjel egy olyan titkos√≠t√°si m√≥dszer, amely egy k√≥dsz√≥ bet≈±i alapj√°n tolja el az egyes karaktereket az √°b√©c√©ben (a Caesar-k√≥d tov√°bbfejleszt√©se).
- Pl. ha a k√≥dsz√≥ CODE, akkor minden k*4+1-edik bet≈±t a C bet≈± √°b√©c√©-index√©vel tol el (2), minden k*4+2-ik bet≈±t az O index√©vel, stb.
- A k√©zi k√≥dol√°shoz a tabula recta nev≈± t√°bl√°zatot haszn√°lt√°k, ahol minden oszlopban az abc szerepel egyre nagyobb eltol√°ssal, √≠gy a k√≥doland√≥ bet≈± sor√°ban a k√≥dsz√≥ jelenlegi bet≈±j√©hez tartoz√≥ oszlop√°ban tal√°lhat√≥ a k√≥dolt bet≈±.
- A feladat egy olyan program meg√≠r√°sa, ami bek√©r egy k√≥dsz√≥t, majd megjelen√≠ti a k√≥dsz√≥ bet≈±ihez tartoz√≥ oszlopokat.
- A t√°bl√°zatot egy dinamikusan lefoglalt m√°trixban t√°rolja el!
- Szabad√≠tsa fel a lefoglalt mem√≥riater√ºletet!
- Feladat folytat√°sa: A t√°bl√°zat megjelen√≠t√©se ut√°n √ºres sorig k√©rjen be sorokat, √©s √≠rja ki a k√≥dolt sz√∂veget a t√°bl√°zat alapj√°n!
- A program ne tegyen k√ºl√∂nbs√©get a kis- √©s nagybet≈±k k√∂z√∂tt √©s hagyja figyelmen k√≠v√ºl a feh√©r karaktereket!
---------------------------------------------------------------------------------------------------


10.h√©t
Header f√°jlok, t√∂bb forr√°sf√°jl linkel√©se
- 1-2 ID√â-ben megmutatni, hogy kell forr√°sf√°jlokat l√©trehozni / hozz√°adni egy projekthez.
- F√ºggv√©nyek deklar√°ci√≥ja vs. defin√≠ci√≥ja
- Include m≈±k√∂d√©s√©nek bemutat√°sa
- Header guard (mi√©rt? hogyan? ism√©tl√©s a kapcsol√≥d√≥ makr√≥kr√≥l)
- Al√°bbi k√©t feladatb√≥l valamelyiket k√∂z√∂sen megcsin√°lni, a m√°sikat √∂n√°ll√≥ munk√°ban!
- Minden strukt√∫ra √©s a hozz√°tartoz√≥ (nem tag-) f√ºggv√©nyek deklar√°ci√≥ja k√ºl√∂n headerben, a f√ºggv√©nyek implement√°ci√≥ja cpp-ben.
- Mindenhol csak a sz√ºks√©ges header f√°jlok include-ol√°sa.
- Megmutatni, hogy hogy kell sz√∂vegf√°jlb√≥l bem√°solni a bemenetet parancssorba, hogy ne kelljen sokat g√©pelni.


C√©gek
- Strukt√∫r√°k √©s a hozz√°tartoz√≥ f√ºggv√©nyek
    - D√°tum
        - Strukt√∫ratagok:
            - √âv
            - H√≥nap
            - Nap
        - F√ºggv√©nyek:
            - D√°tum beolvas√°sa
            - D√°tum ki√≠r√°sa
            - K√©t d√°tum √∂sszehasonl√≠t√°sa (-/0/+)
    - Telephely
        - Strukt√∫ratagok:
            - Helys√©g neve
            - Alap√≠t√°s d√°tuma
            - Utols√≥ √©v bev√©tele (eg√©sz)
        - F√ºggv√©nyek:
            - Telephely beolvas√°sa
            - Ki√≠r√°sa
    - C√©g
        - Strukt√∫ratagok:
            - C√©gn√©v (sz√≥k√∂z√∂kkel)
            - Alap√≠t√°s d√°tuma
            - Telephelyek t√∂mbje (dinamikusan foglalva, bemenetr≈ël kapott m√©ret≈±re)
            - Telephelyek sz√°ma
        - F√ºggv√©nyek:
            - C√©g adatainak beolvas√°sa
            - √âves bev√©tel kisz√°m√≠t√°sa (telephelyek adatait √∂sszes√≠ti)
            - Ki√≠r√°sa
            - T√∂rl√©se (dinamikusan foglalt mem√≥ria felszabad√≠t√°sa)
- main.cpp-ben megval√≥s√≠tand√≥ program
    - 5 c√©g adatainak beolvas√°sa
    - A legr√©gebben alap√≠tott c√©g adatainak ki√≠r√°sa (n√©v, d√°tum, bev√©tel)
    - Helys√©gn√©v bek√©r√©se ut√°n az ott l√©v≈ë telephelyek adatainak ki√≠r√°sa (b√°rmely c√©gekb≈ël)

 
√ìrarend-kezel≈ë
- Strukt√∫r√°k √©s a hozz√°tartoz√≥ f√ºggv√©nyek
    - Szem√©ly
        - N√©v (sz√≥k√∂z√∂kkel)
        - √ìrarend: 5-elem≈± Nap-t√∂mb
    - Nap
        - Tan√≥r√°k sz√°ma
        - Tan√≥r√°k (dinamikus t√∂mb)
    - Tan√≥ra
        - T√°rgy neve (sz√≥k√∂z√∂kkel)
        - Kezd≈ë id≈ëpont
        - V√©ge
        - `bool utkozik(Ora, Idopont)` *Id≈ëpont-√∂sszehasonl√≠t√≥ fgv haszn√°lat√°val*
    - Id≈ëpont
        - √ìra
        - Perc
        - √ñsszehasonl√≠t√≥ f√ºggv√©ny (-1/0/1)
- main.cpp-ben megval√≥s√≠tand√≥ program
    - 4 szem√©ly adatainak beolvas√°sa
    - Nap (index) bek√©r√©se ut√°n megmondani, kinek van a legt√∂bb tan√≥r√°ja aznap (hosszt√≥l f√ºggetlen√ºl)
    - Nap √©s id≈ëpont bek√©r√©se ut√°n kilist√°zni, hogy kinek milyen √≥r√°ja (√≥r√°i) vannak akkor vagy √©pp szabad-e
---------------------------------------------------------------------------------------------------


11. h√©t
1. L√°ncolt lista felt√∂lt√©s, ki√≠rat√°s

√çrjon programot, amely egy t√∂mb elemeivel l√°ncolt list√°t k√©sz√≠t!
A t√∂mb utols√≥ eleme legyen `-1`, ez m√°r ne ker√ºlj√∂n a list√°ba! Az elemeket sz√∫rja be a lista elej√©re! Figyelj√ºk meg, hogy √≠gy a lista ford√≠tott lesz a t√∂mbh√∂z k√©pest!
V√©g√ºl jelezz√ºk ki az egyes elemeket rendre!

2. L√°ncolt lista besz√∫r√°s, felszabad√≠t√°s

Az el≈ëz≈ë feladatot b≈ëv√≠tse tov√°bb √∫gy, hogy olyan f√ºggv√©nyeket √≠r, melyekkel a lista elej√©re √©s v√©g√©re besz√∫r√°st szeml√©ltethetj√ºk! Pr√≥b√°lja is ki k√ºl√∂nb√∂z≈ë √©rt√©kekkel a f√ºggv√©nyeket!
Szabad√≠tsa fel a lefoglalt mem√≥ri√°t!


3. L√°ncolt lista t√∂rl√©s adott felt√©telre

Gener√°ljunk monogramokat, √©letkort, ebb≈ël sz√ºlet√©si √©vet, magass√°got minden l√°ncolt lista elemnek, majd list√°zzuk!
A gener√°lt list√°b√≥l t√∂r√∂lj√ºk a 2000 ut√°n sz√ºletett szem√©lyeket, majd list√°zzuk ki ezt is!


4. L√°ncolt lista megford√≠t√°sa

Ford√≠tsunk meg egy list√°t az elemei √°tl√°ncol√°sa √°ltal! Jelezz√ºk ki el≈ëz≈ë program list√°j√°t eredeti sorrendj√©ben (√©s ez√°ltal az adatokat eredeti sorrendj√ºkben), tov√°bb√° a megford√≠tottat is!
Mindig a lista elej√©r≈ël vesz√ºnk el egy elemet, majd a megford√≠tott lista elej√©re betessz√ºk azt, √≠gy a lista megfordul. V√©g√ºl az eredeti lista elfogy, amint ez megt√∂rt√©nik, a megford√≠tott lista k√©sz.


5. L√°ncolt lista rendez√©se

Rendezz√ºk az el≈ëz≈ë feladat list√°j√°t monogram / √©letkor / magass√°g szerinti n√∂vekv≈ë sorrendbe!
---------------------------------------------------------------------------------------------------


12. h√©t
1. √Åltal√°nos fa strukt√∫ra:

- √çrjunk egy 4 csom√≥pontos f√°t l√©trehoz√≥ programot!
- √çrjunk programot amiben l√©trehozunk egy legal√°bb 3 elemet tartalmaz√≥ egyszer≈± f√°t, majd a v√©g√©n √≠rjuk ki a levelek 
    √©rt√©k√©t! √çrjunk f√ºggv√©nyt a levelek felt√∂lt√©s√©re!

[1-es video itt]



2. Bin√°ris fa:

Defini√°ljunk t√≠pust a lent megadott adatokat tartalmaz√≥ f√°khoz!
    Bin√°ris fa, amely szavakat √©s azok el≈ëfordul√°sainak sz√°m√°t t√°rolja.
    Bin√°ris fa, amely tetsz≈ëlegesen hossz√∫ neveket √©s hozz√°juk tartoz√≥ telefonsz√°mokat t√°rol. 
        (Vigy√°zat, a telefonsz√°mhoz nem el√©g egy eg√©sz sz√°m, hi√°ba van sz√°m a nev√©ben!)

    Morse k√≥dokat akarunk gyorsan feldolgozni. A k√©tf√©le bej√∂v≈ë jel TI √©s T√Å. Egy bin√°ris f√°ban ezt k√∂nnyen t√°rolhatjuk,
    a bej√∂v≈ë jelt≈ël f√ºgg≈ëen megy√ºnk a f√°ban balra (TI) vagy jobbra (T√Å); ha v√©ge van a jelsorozatnak, akkor pedig az 
    adott csom√≥pontban t√°rolt bet≈±t kiolvassuk.

√çrjon logikai f√ºggv√©nyt, amely egy param√©terk√©nt megkapott, eg√©szeket tartalmaz√≥, szigor√∫ √©rtelemben vett bin√°ris f√°r√≥l eld√∂nti, hogy t√∂k√©letesen kiegyens√∫lyozott-e!

[2-es video itt]

√çrjon egy "elj√°r√°st", amely egy param√©terk√©nt megkapott, karaktereket tartalmaz√≥ bin√°ris f√°ban a kisbet≈±ket nagybet≈±re cser√©li! 



3.Rekurzi√≥ 

- A matematik√°ban egy n nemnegat√≠v eg√©sz sz√°m faktori√°lis√°nak az n-n√©l kisebb vagy egyenl≈ë pozit√≠v eg√©sz sz√°mok 
  szorzat√°t nevezz√ºk. Jel√∂l√©se: n!, amit ‚Äûn faktori√°lis‚Äù-nak vagy ‚Äûn faktor‚Äù-nak olvasunk ki. √çrjon programot, amely 
  k√©pes a faktori√°lis kisz√°m√≠t√°s√°ra!

- A Fibonacci-sz√°mok a matematik√°ban az egyik legismertebb m√°sodrendben rekurz√≠v sorozat elemei. A nulladik eleme 0,
  az els≈ë eleme 1, a tov√°bbi elemeket az el≈ëz≈ë kett≈ë √∂sszegek√©nt kapjuk. √çrjon programot amely  kisz√°molja egy adott
  sz√°m Fibonacci √©rt√©k√©t!

[3-as video itt]
---------------------------------------------------------------------------------------------------


13. h√©t
1. F√°jlkezel√©s:
    √çrjunk egy programot ami l√©trehoz egy elsofajl nev≈± txt f√°jlt, √©s bele√≠rja a k√∂vetkez≈ë sz√∂veget:
        - Ezt a fajlt c++ nyelven irt programmal hoztam l√©tre!
        - Juppi!    
        - Hello Vil√°g!

[1-es video itt]

    √çrjunk egy programot, amely  egy sz√∂vegf√°jlb√≥l beolvassa az √∂sszes sort, √©s a 
            szabv√°ny kimeneten megjelen√≠ti a tartalm√°t!

[2-es video itt]

    √çrjon programot, amely meghat√°rozza egy adott f√°jl m√©ret√©t! Az eredm√©nyt jelen√≠tse meg a k√©perny≈ën!

[3-as video itt]

    √çrjon programot, ami egy bin√°ris f√°jl tartalm√°t bet√∂lti a mem√≥ri√°ba!

[4-es video itt]



2. Parancssori param√©terek:
    K√©sz√≠tsen programot, mely eld√∂nti az ind√≠t√≥ parancssorban megadott azonos√≠t√≥j√∫ f√°jlr√≥l, hogy ASCII k√≥d√∫ 
    sz√∂vegf√°jl-e, vagy bin√°ris f√°jl-e! Ha parancssori param√©ter n√©lk√ºl futtatj√°k a programot, akkor ismertesse a 
    k√©perny≈ën a haszn√°lat√°t!

[5-√∂s video itt]